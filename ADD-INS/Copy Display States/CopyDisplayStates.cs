/*
 * 
 *
 * @author        Eric Gustafson
 * @date_created  June 20, 2021, 04:37:42 PM
 * @version       1.0
 */

using SolidWorks.Interop.swpublished;
using SolidWorks.Interop.sldworks;
using SolidWorks.Interop.swconst;
using System;
using System.Drawing;
using System.Windows.Forms;

using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using SolidWorks.Interop.swconst;


namespace Gustafson.SolidWorks.TaskpaneAddIns {
    /**
     * I did not code this class, I merely copied it from this Youtube video: https://www.youtube.com/watch?v=7DlG6OQeJP0
     *
     * Everything else (that was not autogenerated) is my code and mine alone.
     */
    public class CopyStatesAddInSetup : ISwAddin {
        #region SolidWorks Members

        private TaskpaneView mySolidWorksTaskPane;
        private SldWorks mySolidWorks;

        private TaskpaneAddInManager manager;
        private readonly string PROGID = $@"{typeof(CopyStatesAddInSetup).Namespace}";


        #endregion

        /// <summary>
        ///   
        /// </summary>
        /// <param name="thisSw"> Instance of the SolidWorks Application </param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        public bool ConnectToSW(object thisSw, int cookie) {
            /* For debugging
            StreamWriter debugger = new StreamWriter(@"C:\Users\13016\Documents\COMP SCI - C#\SolidWorks Add-Ins\bin\Release\Debugging output.txt");
            */
            mySolidWorks = (SldWorks) thisSw;
            mySolidWorks.SetAddinCallbackInfo2(0, this, cookie);

            mySolidWorksTaskPane = mySolidWorks.CreateTaskpaneView2($@"{System.Reflection.Assembly.GetExecutingAssembly().Location.Replace("Gustafson.SolidWorks.TaskpaneAddIns.dll", "")}\\..\\..\\Images\\SW Custom Add-in Taskpane Icon.png", "Custom SolidWorks Add-Ins");
            manager = (TaskpaneAddInManager) mySolidWorksTaskPane.AddControl(PROGID, string.Empty);
            //debugger.Close(); //for debugging
            return true; //success
        }


        public bool DisconnectFromSW() {
            mySolidWorksTaskPane.DeleteView();
            Marshal.ReleaseComObject(mySolidWorksTaskPane);

            //Not necessary, but good for precautionary reasons
            manager = null;
            mySolidWorksTaskPane = null;

            return true; //success
        }

        /*
         * The Windows operating System has a registry that stores much of the information and settings for software
         * programs, hardware devices, user preferences, and operating-system configurations (https://bit.ly/3j9NkH1)."
         * Windows provides a GUI application, Registry Editor (aka RegEdit), that displays the information the
         * registry has.
         *
         * When we "build" (compile) this project, it is turned into a .NET assembly in the form of a dynamic linked
         * library (.dll file). We need to register this .dll file with the Windows registry in order for SolidWorks 
         * to see this assembly. To do this, we use the RegAsm.exe (which stands for register assembly) executable
         * which is located for me at         C:\Windows\Microsoft.NET\Framework64\v4.0.30319
         * While running command prompt as an administrator, cd into this directory and run the command:
         * "RegAsm.exe /codebase "<absolute or relative path of .dll file>"
         *
         * When this RegAsm.exe executable is run, RegAsm.exe will take care of registering this .dll with the 
         * Windows Registry, and it will then look for a method in the .dll with the [ComRegisterFunction()]
         * attribute. This attribute "...specifies the method to call when you register an assembly for use from COM;
         * this enables the execution of user-written code during the registration process" and the
         * [ComUnregisterFunction()] attribute allows user-code to be specified to aid in deregistration the
         * .dll file.
         *
         * The use the following two methods, COMRegistration() and COMUnregister(), are the user-defined code to
         * to aid in registering the .dll file with RegEdit so that it can add a new subkey for SolidWorks
         *
         * A subkey contains application information needed to support COM functionality.
         *
         * -Eric Gustafson
         */
        #region COM registration
        /// <summary>
        ///     User-defined code for registering this .NET assembly with RegEdit
        /// </summary>
        /// <param name="t"></param>
        [ComRegisterFunction()]
        private static void COMRegistration(Type t) {
            //set the registryKey variable to a new subkey of where the SolidWorks add-ins are located
            using (var registryKey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey($@"SOFTWARE\SolidWorks\AddIns\{t.GUID:b}")) {
                registryKey.SetValue(null, 1); //not sure what this does

                //This sets the name of the Add-In in SolidWorks to "Taskpane Custom Function Manager"
                registryKey.SetValue("Title", "Taskpane Custom Function Manager");

                //In, Tools >> Add-Ins, hovering over the add-in gives a description of "User-defined functions"
                registryKey.SetValue("Description", "User-defined functions");
            }
        }
        /// <summary>
        ///     NOTE: This method is only run if the .dll containing this method is explicitly unregistered via
        ///     C:\Windows\Microsoft.NET\Framework64\v4.0.30319>RegAsm.exe /unregister "<absolute or relative path of .dll file>"
        ///
        ///     If the .DLL is deleted before the it is unregistered, it will not work in SolidWorks, but since it wasn't
        ///     unregistered, RegEdit will still have a subkey of the add-in AND SolidWorks will still display the
        ///     Add-In in Tools >> Add-Ins. The fix for this is to manually delete the subkey in RegEdit. The subkey
        ///     should be located in this directory of RegEdit: Computer\HKEY_LOCAL_MACHINE\SOFTWARE\SolidWorks\AddIns
        /// </summary>
        /// <param name="t"></param>
        [ComUnregisterFunction()]
        private static void COMUnregister(Type t) {
            //Deletes subkey in RegEdit
            Microsoft.Win32.Registry.LocalMachine.DeleteSubKeyTree($@"SOFTWARE\SolidWorks\AddIns\{t.GUID:b}");
        }
        #endregion
    }





    /**
     * For the dialog box that pops-up
     *
     * https://bit.ly/3A3tpQe //Get Display State Names and Visibilities of Components Example
     * https://bit.ly/2TX5npx //Get List of Configurations Example
     */
    internal class CopyDisplayStatesForm : Form {
        public SldWorks mySolidWorks;
        private Configuration[] configList;
        private ModelDoc2 currentDoc;

        public CopyDisplayStatesForm() {
            InitializeComponent();

            /*Getting Configurations of the active document*/
            currentDoc = (ModelDoc2) mySolidWorks.ActiveDoc; //the current document (file) open in SolidWorks
            configList = null;

            if (currentDoc.GetType() == (int)swDocumentTypes_e.swDocASSEMBLY) {
                string[] listOfConfigNames = (string[]) currentDoc.GetConfigurationNames();
                configList = new Configuration[listOfConfigNames.Length];
                int index = -1;
                foreach (string configName in listOfConfigNames) {
                    configList[++index] = (Configuration) currentDoc.GetConfigurationByName(configName);
                    fromConfigComboBox.Items.Add(configName);
                    toConfigComboBox.Items.Add(configName);
                }
            } else {
                throw new ApplicationException("Extension can only be used with Assemblies");
            }
        }

        /// <summary>
        ///  Required designer variable.
        /// </summary>
        private readonly System.ComponentModel.IContainer components = null;

        /// <summary>
        ///  Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing) {
            if (disposing && (components != null)) {
                components.Dispose();
            }

            base.Dispose(disposing);
        }

        #region Window Components

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent() {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CopyDisplayStatesForm));
            this.fromConfigLabel = new System.Windows.Forms.Label();
            this.fromConfigComboBox = new System.Windows.Forms.ComboBox();
            this.button = new System.Windows.Forms.Button();
            this.toConfigLabel = new System.Windows.Forms.Label();
            this.toConfigComboBox = new System.Windows.Forms.ComboBox();
            this.SuspendLayout();
            // 
            // fromConfigLabel
            // 
            this.fromConfigLabel.Font = new System.Drawing.Font("Century Gothic", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.fromConfigLabel.Location = new System.Drawing.Point(19, 20);
            this.fromConfigLabel.Name = "fromConfigLabel";
            this.fromConfigLabel.Size = new System.Drawing.Size(413, 22);
            this.fromConfigLabel.TabIndex = 0;
            this.fromConfigLabel.Text = "Choose which configuration to copy display states FROM:";
            this.fromConfigLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // fromConfigComboBox
            // 
            this.fromConfigComboBox.FormattingEnabled = true;
            this.fromConfigComboBox.Location = new System.Drawing.Point(52, 45);
            this.fromConfigComboBox.Name = "fromConfigComboBox";
            this.fromConfigComboBox.Size = new System.Drawing.Size(358, 23);
            this.fromConfigComboBox.TabIndex = 1;
            // 
            // button
            // 
            this.button.Font = new System.Drawing.Font("Century Gothic", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button.Location = new System.Drawing.Point(133, 183);
            this.button.Name = "button";
            this.button.Size = new System.Drawing.Size(197, 35);
            this.button.TabIndex = 2;
            this.button.Text = "Copy Display States";
            this.button.UseVisualStyleBackColor = true;
            // 
            // toConfigLabel
            // 
            this.toConfigLabel.Font = new System.Drawing.Font("Century Gothic", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.toConfigLabel.Location = new System.Drawing.Point(52, 110);
            this.toConfigLabel.Name = "toConfigLabel";
            this.toConfigLabel.Size = new System.Drawing.Size(358, 22);
            this.toConfigLabel.TabIndex = 3;
            this.toConfigLabel.Text = "Choose which configuration to copy display state TO:";
            // 
            // toConfigComboBox
            // 
            this.toConfigComboBox.FormattingEnabled = true;
            this.toConfigComboBox.Location = new System.Drawing.Point(52, 135);
            this.toConfigComboBox.Name = "toConfigComboBox";
            this.toConfigComboBox.Size = new System.Drawing.Size(358, 23);
            this.toConfigComboBox.TabIndex = 4;
            // 
            // CopyDisplayStatesForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(464, 230);
            this.Controls.Add(this.toConfigComboBox);
            this.Controls.Add(this.toConfigLabel);
            this.Controls.Add(this.button);
            this.Controls.Add(this.fromConfigComboBox);
            this.Controls.Add(this.fromConfigLabel);
            this.Font = new System.Drawing.Font("Times New Roman", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.Name = "CopyDisplayStatesForm";
            this.Text = "Copy Display States";
            this.ResumeLayout(false);
        }

        private Button button;
        private ComboBox fromConfigComboBox;
        private ComboBox toConfigComboBox;
        private Label fromConfigLabel;
        private Label toConfigLabel;

        #endregion

        /// <summary>
        /// This method copies the display states from one configuration to another.
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ButtonClicked(object sender, EventArgs e) {
            Configuration from = (Configuration) currentDoc.GetConfigurationByName(fromConfigComboBox.SelectedItem.ToString());
            Configuration to = (Configuration)currentDoc.GetConfigurationByName(toConfigComboBox.SelectedItem.ToString());
            string[] 
        }
    }
}